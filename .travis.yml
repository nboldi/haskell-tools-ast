# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack

# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
matrix:
  include:
  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS="--coverage --haddock --no-haddock-deps"
    compiler: ": #stack default linux"
    os: linux
    sudo: false
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx
    if: type = cron # OSX build is slower, so only do one on nightly

before_install:
  # Using compiler above sets CC to an invalid value, so unset it
  - unset CC

  # Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - |
    if [ `uname` = "Darwin" ]
    then
      travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
    else
      travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    fi

install:
  # Install all dependecies of Haskell-tools, including test requirements
  - travis_wait 60 stack --no-terminal --install-ghc build --test --no-run-tests $ARGS

script:

  # Build Haskell-tools with all library, executable, test and benchmark
  - travis_wait 30 stack --no-terminal build --test --no-run-tests $ARGS

  # Run tests. We record test coverage information. We need to perform all of them at once to create the unified coverage reports.
  # Daemon tests are disabled on OSX (some socket-related problem).
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ];
    then
      travis_wait 30 stack --no-terminal test $ARGS haskell-tools-rewrite haskell-tools-builtin-refactorings haskell-tools-experimental-refactorings haskell-tools-cli
    else
      travis_wait 30 stack --no-terminal test $ARGS haskell-tools-rewrite haskell-tools-builtin-refactorings haskell-tools-experimental-refactorings haskell-tools-daemon haskell-tools-cli haskell-tools-demo
    fi
  - stack sdist

  # Run the daily test if doing a daily build.
  - bash ./daily.sh

after_script:
  # Run benchmark, publish API, coverage and benchmark data to our site
  - bash ./deploy.sh
