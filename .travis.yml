# This file has been generated -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

branches:
  only:
    - master

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABALVER=1.24 GHCVER=8.0.1
      compiler: ": #GHC 8.0.1"
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.1], sources: [hvr-ghc]}}

before_install:
 - unset CC
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config

 # list all dependencies for all packages
 - cd test/require; cabal install --only-dependencies --dry > ../../installplan.txt; cd ../..

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;

     cd test/require; cabal install --only-dependencies --dry > ../../installplan.txt; cd ../..;
     cd test/require; cabal install --only-dependencies; cd ../..;
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 # install all components
 - cd src/ast && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..
 - cd src/ast-trf && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..
 - cd src/ast-ppr && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..
 - cd src/ast-ghc && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..
 - cd src/ast-gen && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..
 - cd src/refactor && cabal install --enable-coverage && cabal check && cabal sdist && cd ../..

 # run test
 - cd test
 - cabal configure --enable-coverage -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - dist/build/haskell-tools-test/haskell-tools-test # run the tests as an executable (better for coverage)
 - cd ..

 # check if generated tarballs are usable
 - cabal install --force-reinstalls src/ast/dist/*-*.tar.gz
 - cabal install --force-reinstalls src/ast-trf/dist/*-*.tar.gz
 - cabal install --force-reinstalls src/ast-ppr/dist/*-*.tar.gz
 - cabal install --force-reinstalls src/ast-ghc/dist/*-*.tar.gz
 - cabal install --force-reinstalls src/ast-gen/dist/*-*.tar.gz
 - cabal install --force-reinstalls src/refactor/dist/*-*.tar.gz
# EOF

after_script:
  - cd test

  # move the tix file to where it will be expected
  - mv haskell-tools-test.tix dist/hpc/vanilla/tix/haskell-tools-test/haskell-tools-test.tix

  # copy mix files to test dir for coverage
  - TEST_VERSION="$(cat haskell-tools-test.cabal | sed -n 's/^version:[ \n]*\([0-9.]*\)/\1/p')"
  - mkdir -p dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/ast/dist/hpc/vanilla/mix/haskell-tools-*/* 
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/ast-trf/dist/hpc/vanilla/mix/haskell-tools-*/*
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/ast-ppr/dist/hpc/vanilla/mix/haskell-tools-*/*
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/ast-ghc/dist/hpc/vanilla/mix/haskell-tools-*/*
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/ast-gen/dist/hpc/vanilla/mix/haskell-tools-*/*
  - cp -r -t dist/hpc/vanilla/mix/haskell-tools-test-$TEST_VERSION ../src/refactor/dist/hpc/vanilla/mix/haskell-tools-*/*

  # copy source files to dir for coverage
  - SOURCE_ROOT=Language
  - cp -v -r -t . ../src/*/$SOURCE_ROOT

  - $HOME/.cabal/bin/hpc-coveralls --exclude-dir=test --repo-token=evVaJSdhT3mFWlBuNINeuXtLc86FXYFml haskell-tools-test